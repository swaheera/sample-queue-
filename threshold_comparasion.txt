# Load required packages for plotting
library(ggplot2)
library(patchwork)

# Simulation parameters
k <- 3        # number of servers
lambda <- 2   # initial arrival rate
mu <- 1       # service rate per server
T <- 100      # simulation time
n_sims <- 20  # number of simulations
dt <- 0.01    # time step
initial_n <- 100  # initial queue length
rate_change_time <- 50  # time at which arrival rate doubles

# Enhanced simulation function to track processed customers with dynamic arrival rate
simulate_mmk <- function(k, lambda, mu, T, dt, initial_n, rate_change_time) {
    n_steps <- T/dt
    queue_length <- numeric(n_steps)
    processed <- numeric(n_steps)
    queue_length[1] <- initial_n
    processed[1] <- 0
    
    for(i in 2:n_steps) {
        current_n <- queue_length[i-1]
        current_time <- (i-1) * dt
        
        # Update lambda based on time
        current_lambda <- if(current_time >= rate_change_time) 2 * lambda else lambda
        
        # Calculate transition probabilities
        p_arrival <- current_lambda * dt
        p_departure <- min(current_n, k) * mu * dt
        
        # Generate random events
        arrival <- rbinom(1, 1, p_arrival)
        departure <- rbinom(1, 1, p_departure)
        
        # Update queue length and processed count
        queue_length[i] <- current_n + arrival - departure
        processed[i] <- processed[i-1] + departure
    }
    
    return(data.frame(
        time = seq(0, T-dt, by=dt),
        queue_length = queue_length,
        processed = processed
    ))
}

# Run multiple simulations
set.seed(123)
sim_data <- do.call(rbind, lapply(1:n_sims, function(sim_id) {
    sim_result <- simulate_mmk(k, lambda, mu, T, dt, initial_n, rate_change_time)
    sim_result$simulation <- factor(sim_id)
    return(sim_result)
}))

# Calculate mean trajectories
time_points <- unique(sim_data$time)
mean_trajectories <- data.frame(
    time = time_points,
    mean_length = tapply(sim_data$queue_length, sim_data$time, mean),
    mean_processed = tapply(sim_data$processed, sim_data$time, mean)
)

# Calculate theoretical mean queue length (before rate change)
rho <- lambda/(k*mu)
theoretical_mean_before <- if(rho < 1) {
    (lambda^2)/(mu*(mu-lambda)) + lambda/mu
} else {
    NULL
}

# Calculate theoretical mean queue length (after rate change)
rho_after <- (2*lambda)/(k*mu)
theoretical_mean_after <- if(rho_after < 1) {
    ((2*lambda)^2)/(mu*(mu-2*lambda)) + 2*lambda/mu
} else {
    NULL
}

# Create the queue length plot
p1 <- ggplot() +
    geom_line(data = sim_data, 
              aes(x = time, y = queue_length, group = simulation),
              color = "black", alpha = 0.1) +
    geom_line(data = mean_trajectories,
              aes(x = time, y = mean_length),
              color = "red", size = 1) +
    geom_vline(xintercept = rate_change_time, 
               linetype = "dashed", 
               color = "blue", 
               alpha = 0.5) +
    {if (!is.null(theoretical_mean_before))
        geom_segment(aes(x = 0, xend = rate_change_time, 
                        y = theoretical_mean_before, yend = theoretical_mean_before),
                    linetype = "dashed", color = "red", alpha = 0.5)} +
    {if (!is.null(theoretical_mean_after))
        geom_segment(aes(x = rate_change_time, xend = T, 
                        y = theoretical_mean_after, yend = theoretical_mean_after),
                    linetype = "dashed", color = "red", alpha = 0.5)} +
    labs(
        title = "Queue Length Over Time",
        subtitle = paste("Initial λ =", lambda, ", μ =", mu, "per server\nλ doubles at t =", rate_change_time),
        x = "Time",
        y = "Queue Length"
    ) +
    theme_minimal() +
    theme(
        plot.title = element_text(size = 12, face = "bold"),
        plot.subtitle = element_text(size = 10)
    )

# Create the processed customers plot
p2 <- ggplot() +
    geom_line(data = sim_data, 
              aes(x = time, y = processed, group = simulation),
              color = "black", alpha = 0.1) +
    geom_line(data = mean_trajectories,
              aes(x = time, y = mean_processed),
              color = "red", size = 1) +
    geom_vline(xintercept = rate_change_time, 
               linetype = "dashed", 
               color = "blue", 
               alpha = 0.5) +
    labs(
        title = "Cumulative Processed Customers",
        subtitle = paste("k =", k, "servers"),
        x = "Time",
        y = "Number of Processed Customers"
    ) +
    theme_minimal() +
    theme(
        plot.title = element_text(size = 12, face = "bold"),
        plot.subtitle = element_text(size = 10)
    )

# Combine plots side by side
p1 + p2 + plot_layout(guides = "collect")
